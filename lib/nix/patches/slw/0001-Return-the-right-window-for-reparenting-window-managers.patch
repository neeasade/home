From d670444d3a161bba5f2c0ecf860a7cb7ce6b62e9 Mon Sep 17 00:00:00 2001
From: viz <visuwesh@tutanota.com>
Date: Tue, 21 Sep 2021 19:47:39 +0530
Subject: [PATCH] Return the right window for reparenting window managers

This makes slw behave properly when used in reparenting window
managers like i3, awesome, etc.  All the code is from xwininfo:
dsimple.c and clientwin.c.
---
 slw.c | 235 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 234 insertions(+), 1 deletion(-)

diff --git a/slw.c b/slw.c
index abe24c5..9e58bc9 100644
--- a/slw.c
+++ b/slw.c
@@ -3,6 +3,7 @@
 #include <err.h>
 #include <stdio.h>
 #include <stdlib.h>
+#include <string.h>
 #include <xcb/xcb.h>
 #include <xcb/xcb_aux.h>
 #include <xcb/xcb_cursor.h>
@@ -14,6 +15,238 @@

 static xcb_connection_t *conn;
 static xcb_screen_t *scr;
+static xcb_atom_t atom_wm_state = XCB_ATOM_NONE;
+
+/* The following functions are yoinked from xwininfo. */
+
+/* Get an atom by name when it is needed. */
+static xcb_atom_t
+get_atom(const char *name)
+{
+	xcb_intern_atom_cookie_t r;
+	xcb_intern_atom_reply_t* reply;
+
+	r = xcb_intern_atom(conn, 0, strlen(name), (name));
+	reply = xcb_intern_atom_reply(conn, r, NULL);
+	return reply->atom;
+}
+
+/*
+ * Find virtual roots (_NET_VIRTUAL_ROOTS)
+ */
+static xcb_window_t *
+find_roots(unsigned int *num)
+{
+    xcb_atom_t atom_virtual_root;
+
+    xcb_get_property_cookie_t prop_cookie;
+    xcb_get_property_reply_t *prop_reply;
+
+    xcb_window_t *prop_ret = NULL;
+
+    *num = 0;
+
+    atom_virtual_root = get_atom("_NET_VIRTUAL_ROOTS");
+    if (atom_virtual_root == XCB_ATOM_NONE)
+        return NULL;
+
+    prop_cookie = xcb_get_property(conn, 0, scr->root, atom_virtual_root,
+                                    XCB_ATOM_WINDOW, 0, 0x7fffffff);
+    prop_reply = xcb_get_property_reply (conn, prop_cookie, NULL);
+    if (!prop_reply)
+        return NULL;
+
+    if ((prop_reply->value_len > 0)
+		&& (prop_reply->type == XCB_ATOM_WINDOW)
+        && (prop_reply->format == 32)) {
+        int length = xcb_get_property_value_length (prop_reply);
+        prop_ret = malloc(length);
+        if (prop_ret) {
+            memcpy(prop_ret, xcb_get_property_value(prop_reply), length);
+            *num = prop_reply->value_len;
+        }
+    }
+    free(prop_reply);
+
+    return prop_ret;
+}
+
+/*
+ * Find child window at pointer location
+ */
+static xcb_window_t
+find_child_at_pointer(xcb_window_t win)
+{
+    xcb_window_t child_return = XCB_WINDOW_NONE;
+
+    xcb_query_pointer_cookie_t qp_cookie;
+    xcb_query_pointer_reply_t *qp_reply;
+
+    qp_cookie = xcb_query_pointer(conn, win);
+    qp_reply = xcb_query_pointer_reply(conn, qp_cookie, NULL);
+
+    if (qp_reply) {
+        child_return = qp_reply->child;
+        free(qp_reply);
+    }
+
+    return child_return;
+}
+
+/*
+ * Check if window has given property
+ */
+static int
+window_has_property(xcb_window_t win, xcb_atom_t atom)
+{
+    xcb_get_property_cookie_t prop_cookie;
+    xcb_get_property_reply_t *prop_reply;
+
+    prop_cookie = xcb_get_property(conn, 0, win, atom,
+                                    XCB_GET_PROPERTY_TYPE_ANY, 0, 0);
+
+    prop_reply = xcb_get_property_reply(conn, prop_cookie, NULL);
+
+    if (prop_reply) {
+        xcb_atom_t reply_type = prop_reply->type;
+        free (prop_reply);
+        if (reply_type != XCB_NONE)
+            return 1;
+    }
+
+    return 0;
+}
+
+/*
+ * Check if window is viewable
+ */
+static int
+window_is_viewable(xcb_window_t win)
+{
+	int ok = 0;
+    xcb_get_window_attributes_cookie_t attr_cookie;
+    xcb_get_window_attributes_reply_t *xwa;
+
+    attr_cookie = xcb_get_window_attributes(conn, win);
+    xwa = xcb_get_window_attributes_reply(conn, attr_cookie, NULL);
+
+    if (xwa) {
+        ok = (xwa->_class == XCB_WINDOW_CLASS_INPUT_OUTPUT) &&
+            (xwa->map_state == XCB_MAP_STATE_VIEWABLE);
+        free (xwa);
+    }
+
+    return ok;
+}
+
+/*
+ * Find a window that has WM_STATE set in the window tree below win.
+ * Unmapped/unviewable windows are not considered valid matches.
+ * Children are searched in top-down stacking order.
+ * The first matching window is returned, None if no match is found.
+ */
+static xcb_window_t
+find_client_in_children(xcb_window_t win)
+{
+    xcb_query_tree_cookie_t qt_cookie;
+    xcb_query_tree_reply_t *tree;
+    xcb_window_t *children;
+    unsigned int n_children;
+    int i;
+
+    qt_cookie = xcb_query_tree(conn, win);
+    tree = xcb_query_tree_reply(conn, qt_cookie, NULL);
+    if (!tree)
+        return XCB_WINDOW_NONE;
+    n_children = xcb_query_tree_children_length(tree);
+    if (!n_children) {
+        free (tree);
+        return XCB_WINDOW_NONE;
+    }
+    children = xcb_query_tree_children(tree);
+
+    /* Check each child for WM_STATE and other validity */
+    win = XCB_WINDOW_NONE;
+    for (i = (int) n_children - 1; i >= 0; i--) {
+        if (!window_is_viewable(children[i])) {
+            /* Don't bother descending into this one */
+            children[i] = XCB_WINDOW_NONE;
+            continue;
+        }
+        if (!window_has_property(children[i], atom_wm_state))
+            continue;
+
+        /* Got one */
+        win = children[i];
+        goto done;
+    }
+
+    /* No children matched, now descend into each child */
+    for (i = (int) n_children - 1; i >= 0; i--) {
+        if (children[i] == XCB_WINDOW_NONE)
+            continue;
+        win = find_client_in_children(children[i]);
+        if (win != XCB_WINDOW_NONE)
+            break;
+    }
+
+  done:
+    free (tree); /* includes children */
+
+    return win;
+}
+
+/*
+ * Find client window at pointer location
+ *
+ * subwin is the subwindow reported by a ButtonPress event on root.
+ *
+ * If the WM uses virtual roots subwin may be a virtual root.
+ * If so, we descend the window stack at the pointer location and assume the
+ * child is the client or one of its WM frame windows.
+ * This will of course work only if the virtual roots are children of the real
+ * root.
+ */
+static xcb_window_t
+find_client(xcb_window_t subwin)
+{
+    xcb_window_t *roots;
+    unsigned int i, n_roots;
+    xcb_window_t win;
+
+    /* Check if subwin is a virtual root */
+    roots = find_roots(&n_roots);
+    for (i = 0; i < n_roots; i++) {
+        if (subwin != roots[i])
+            continue;
+        win = find_child_at_pointer(subwin);
+        if (win == XCB_WINDOW_NONE) {
+            free(roots);
+            return subwin;      /* No child - Return virtual root. */
+        }
+        subwin = win;
+        break;
+    }
+    free (roots);
+
+    if (atom_wm_state == XCB_ATOM_NONE) {
+        atom_wm_state = get_atom("WM_STATE");
+        if (atom_wm_state == XCB_ATOM_NONE)
+            return subwin;
+    }
+
+    /* Check if subwin has WM_STATE */
+    if (window_has_property(subwin, atom_wm_state) == 1)
+        return subwin;
+
+    /* Attempt to find a client window in subwin's children */
+    win = find_client_in_children(subwin);
+    if (win != XCB_WINDOW_NONE)
+        return win;             /* Found a client */
+
+    /* Did not find a client */
+    return subwin;
+}

 static xcb_window_t
 select_window(void)
@@ -52,7 +285,7 @@ select_window(void)
 			break;
 		case XCB_BUTTON_RELEASE:
 			xcb_cursor_context_free(ctx);
-			return w;
+			return find_client(w);
 			break; /* NOTREACHED */
 		}
 	}
--
2.32.0
